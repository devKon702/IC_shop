generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id                 Int               @id @default(autoincrement())
  categoryId         Int
  datasheetLink      String?
  minQuantity        Int
  maxQuantity        Int
  quantityStep       Int
  unit               String
  slug               String            @unique
  desc               String?
  vat                Float
  activeWholesaleId  Int?              @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  isActive           Boolean           @default(true)

  category           Category          @relation(fields: [categoryId], references: [id])
  attributes         ProductAttribute[]
  images             ProductImage[]
  wholesales         Wholesale[]
  activeWholesale    Wholesale?        @relation("ActiveWholeSale",fields: [activeWholesaleId], references: [id])
  orderDetails       OrderDetail[]
  cartDetails        CartDetail[]

  @@fulltext([slug, desc])
}

model Category {
  id         Int        @id @default(autoincrement())
  name       String
  imageUrl   String?
  parentId   Int?
  level      Int
  slug       String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  parent     Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children   Category[] @relation("CategoryHierarchy")
  products   Product[]
  attributes Attribute[]
}

model Attribute {
  id         Int               @id @default(autoincrement())
  name       String
  categoryId Int

  category   Category          @relation(fields: [categoryId], references: [id])
  values     AttributeValue[]
}

model AttributeValue {
  id           Int             @id @default(autoincrement())
  attributeId  Int
  value        String

  attribute    Attribute       @relation(fields: [attributeId], references: [id])
  products     ProductAttribute[]
}

model ProductAttribute {
  id              Int             @id @default(autoincrement())
  productId       Int
  attributeValueId Int

  product         Product         @relation(fields: [productId], references: [id])
  attributeValue  AttributeValue @relation(fields: [attributeValueId], references: [id])
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  productId  Int
  imageUrl   String

  product    Product @relation(fields: [productId], references: [id])
}

model Wholesale {
  id         Int             @id @default(autoincrement())
  productId  Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  
  details    WholesaleDetail[]
  product    Product         @relation(fields:[productId], references:[id])
  isActiveFor   Product?      @relation("ActiveWholeSale")  
}

model WholesaleDetail {
  id          Int        @id @default(autoincrement())
  wholesaleId Int
  desc        String
  min         Int
  max         Int
  price       Float
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  wholesale   Wholesale  @relation(fields: [wholesaleId], references: [id])
}

model Role {
  role String @id
  accounts Account[]
}

model Account {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  role          String
  isActive      Boolean   @default(true)
  isGoogleAuth  Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User?      
  roleModel     Role      @relation(fields: [role], references: [role])
}

model User {
  id          Int       @id @default(autoincrement())
  accountId   Int       @unique
  name        String
  avatarUrl   String?
  updatedAt   DateTime  @updatedAt

  account     Account   @relation(fields: [accountId], references: [id])
  orderTimelines OrderTimeline[]
  addresses   Address[]
  orders      Order[]
  cartDetails CartDetail[]
}

model Address {
  id            Int     @id @default(autoincrement())
  userId        Int
  alias         String
  receiverName  String
  receiverPhone String
  province      String
  district      String
  commune       String
  detail        String

  user          User    @relation(fields: [userId], references: [id])
}

model Order {
  id                   Int             @id @default(autoincrement())
  userId               Int
  orderStatusId        Int
  address              String
  receiverName         String
  receiverPhone        String
  deliveryTypeId       String
  vat                  Float
  deliveryFee          Float
  earliestReceiveTime  DateTime
  latestReceiveTime    DateTime
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  user                 User            @relation(fields: [userId], references: [id])
  orderStatus          OrderStatus     @relation(fields: [orderStatusId], references: [id])
  deliveryType         DeliveryType    @relation(fields: [deliveryTypeId], references: [type])
  details              OrderDetail[]
  timelines            OrderTimeline[]
}

model DeliveryType {
  type  String  @id
  name  String
  orders Order[]
}

model OrderStatus {
  id        Int     @id @default(autoincrement())
  name      String
  orders    Order[]
  orderTimelines OrderTimeline[]
}

model OrderTimeline {
  id             Int         @id @default(autoincrement())
  orderId        Int
  orderStatusId  Int
  userId         Int
  desc           String
  createdAt      DateTime    @default(now())

  user           User        @relation(fields: [userId], references: [id])
  order          Order       @relation(fields: [orderId], references: [id])
  orderStatus    OrderStatus @relation(fields: [orderStatusId], references: [id])
}

model OrderDetail {
  id         Int     @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  totalPrice Float

  product    Product @relation(fields: [productId], references: [id])
  order      Order   @relation(fields: [orderId], references: [id])
}

model CartDetail {
  id         Int     @id @default(autoincrement())
  userId     Int
  productId  Int
  quantity   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user       User    @relation(fields: [userId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
}
